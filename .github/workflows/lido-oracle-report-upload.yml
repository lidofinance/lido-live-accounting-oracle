name: Lido Oracle Report Collection and Upload

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  collect-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Miniconda Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true
          python-version: '3.11'

      - name: Configure Environment Variables
        run: |
          echo "RPC_URL=${{ secrets.RPC_URL }}" >> .env
          echo "HASH_CONSENSUS_ADDRESS=${{ vars.HASH_CONSENSUS_ADDRESS }}" >> .env
          echo "LIDO_ADDRESS=${{ vars.LIDO_ADDRESS }}" >> .env
          echo "ACCOUNTING_ORACLE_ADDRESS=${{ vars.ACCOUNTING_ORACLE_ADDRESS }}" >> .env
          echo "WITHDRAWAL_VAULT_ADDRESS=${{ vars.WITHDRAWAL_VAULT_ADDRESS }}" >> .env
          echo "EL_REWARDS_VAULT_ADDRESS=${{ vars.EL_REWARDS_VAULT_ADDRESS }}" >> .env
          echo "BURNER_ADDRESS=${{ vars.BURNER_ADDRESS }}" >> .env
          echo "DUNE_API_KEY=${{ secrets.DUNE_API_KEY }}" >> .env

      - name: Install Python Dependencies
        shell: bash -l {0}
        run: |
          conda install -y -c conda-forge pandas requests python-dotenv
          pip install dune-client

      - name: Install Node.js Dependencies
        run: npm install

      - name: Generate Oracle Report Data
        run: npm run report

      - name: Upload Oracle Report to Dune Analytics
        shell: bash -l {0}
        run: |
          # First attempt to upload
          output=$(python scripts/upload_to_dune.py --type oracle 2>&1)
          echo "$output"
          
          # Check if we got a "Table was not found" error - match exact error message
          if echo "$output" | grep -q "This table was not found"; then
            echo "Table not found, creating table first..."
            python scripts/create_dune_tables.py --type oracle
            
            # Try upload again
            echo "Attempting upload again after table creation..."
            python scripts/upload_to_dune.py --type oracle || {
              echo "::error::Upload to Dune Analytics failed after table creation"
              exit 1
            }
          # Check for CSV upload error
          elif echo "$output" | grep -q "We do not support inserting into tables created from a CSV upload"; then
            echo "CSV upload error detected, recreating table..."
            python scripts/create_dune_tables.py --type oracle --action recreate
            
            # Try upload again
            echo "Attempting upload again after table recreation..."
            python scripts/upload_to_dune.py --type oracle || {
              echo "::error::Upload to Dune Analytics failed after table recreation"
              exit 1
            }
          elif echo "$output" | grep -q "Error"; then
            echo "::error::Upload to Dune Analytics failed"
            exit 1
          fi 